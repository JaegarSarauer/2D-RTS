<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spacesPerRow = 5;

inventorySpaces = inventoryManager.inventorySpaces;

spacesSize = 192

spacesPadding = 10;

interfaceBorder = 10;


width = (interfaceBorder * 2) + (spacesPerRow * spacesSize) + (spacesPadding * (spacesPerRow -1));
height = (interfaceBorder * 2) + (ceil(inventorySpaces / spacesPerRow) * spacesSize) + (spacesPadding * (ceil(inventorySpaces / spacesPerRow) - 1));

inventorySurface = surface_create(width, height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(inventorySurface) 
//borders of interface
for(i = 0; i &lt; ceil(width / interfaceBorder); i++) {
    draw_sprite(interfaceSprites, 5, i * interfaceBorder, 0);
    draw_sprite(interfaceSprites, 7, i * interfaceBorder, height - interfaceBorder);
}
for(i = 0; i &lt; ceil(height / interfaceBorder); i++) {
    draw_sprite(interfaceSprites, 4, 0, i * interfaceBorder);
    draw_sprite(interfaceSprites, 6, width - interfaceBorder, i * interfaceBorder);
}
//corners of inverface
draw_sprite(interfaceSprites, 0, 0, 0);
draw_sprite(interfaceSprites, 1, width - interfaceBorder, 0);
draw_sprite(interfaceSprites, 2, width - interfaceBorder, height - interfaceBorder);
draw_sprite(interfaceSprites, 3, 0, height - interfaceBorder);
//inside color
draw_set_color(make_colour_rgb(174, 118, 64));
draw_rectangle(interfaceBorder,interfaceBorder,width - interfaceBorder, height - interfaceBorder, false);


//drawing items
for (i = 0; i &lt; ds_list_size(inventoryManager.items); i++) {
    var sprite = scr_getItemSprite(inventoryManager.items[|i]);
    draw_sprite(sprite, scr_getItemSubimage(inventoryManager.items[|i]), sprite_get_xoffset(sprite) + interfaceBorder + (i % spacesPerRow)*spacesSize + (((i % spacesPerRow) - 1) * spacesPadding),sprite_get_yoffset(sprite) + interfaceBorder + floor(i / spacesPerRow)*spacesSize + ((floor(i / spacesPerRow) - 1) * spacesPadding));
}

surface_reset_target();
draw_surface(inventorySurface, view_xview[0] + (view_wview[0] - width) / 2, view_yview[0] + (view_hview[0] - height)/1.2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
